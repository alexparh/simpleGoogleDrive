# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Access to file/folder"""
type Access {
  """Access type"""
  accessType: String!

  """The date the access was created"""
  createdAt: DateTime!

  """File id"""
  fileId: ID

  """Folder id"""
  folderId: ID

  """A unique identifier for access to file/folder"""
  id: ID!

  """User id"""
  userId: ID!
}

"""Add access to file/folder"""
input AddAccess {
  """Access type"""
  accessType: String!

  """User email"""
  email: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type File {
  """Access list"""
  accessList: [Access!]

  """The date the folder was created"""
  createdAt: DateTime!

  """Folder id"""
  folderId: ID!

  """A unique identifier for the folder"""
  id: ID!

  """Folder name"""
  name: String!

  """Folder path"""
  path: String!

  """Public or private view"""
  publicUrl: String

  """Folder creator id"""
  userId: ID!
}

type FileLink {
  """File download link"""
  downloadLink: String!
}

type Folder {
  """Access list"""
  accessList: [Access!]

  """The date the folder was created"""
  createdAt: DateTime!

  """Images"""
  files: [File!]

  """A unique identifier for the folder"""
  id: ID!

  """Folder name"""
  name: String!

  """Parent folder id"""
  parentFolderId: ID

  """Folder path"""
  path: String!

  """Subfolders"""
  subFolders: [Folder!]

  """Folder creator id"""
  userId: ID!
}

type Mutation {
  copyFile(
    """Folder id"""
    folderId: ID!

    """A unique identifier for the file"""
    id: ID!
  ): File
  copyFolder(
    """A unique identifier for the fodler"""
    id: ID!

    """Parent folder id"""
    parentFolderId: ID!
  ): Folder
  createFolder(
    """Name"""
    name: String!

    """Parent folder id"""
    parentFolderId: ID!
  ): Folder
  deleteFile(
    """A unique identifier for the file"""
    id: ID!
  ): Ok
  deleteFolder(
    """A unique identifier for the folder"""
    id: ID!
  ): Ok
  google(
    """Auth user flag"""
    authuser: String!

    """Code"""
    code: String!

    """Domain"""
    hd: String!

    """Prompt (none by default)"""
    prompt: String!

    """Google scope"""
    scope: String!
  ): UserWithToken
  refresh(
    """Refresh token"""
    refreshToken: String!
  ): UserWithToken
  updateFile(
    """New access list"""
    accessList: [AddAccess!]

    """A unique identifier for the file"""
    id: ID!

    """Public or private view"""
    isPublic: Boolean

    """Name"""
    name: String
  ): File
  updateFolder(
    """New access list"""
    accessList: [AddAccess!]

    """A unique identifier for the fodler"""
    id: ID!

    """New name"""
    name: String
  ): Folder
  uploadFile(
    file: Upload!

    """Folder id"""
    folderId: ID!
  ): File
}

"""Ok result"""
type Ok {
  """Ok flag"""
  ok: Boolean!
}

type Query {
  downloadFile(
    """File id"""
    id: ID!
  ): FileLink!
  folder(id: ID): File
  google: RedirectUrlType
  search(name: String!): [SearchResult!]
}

"""Redirect Url"""
type RedirectUrlType {
  """Url"""
  url: String!
}

type SearchResult {
  """Search result entity"""
  entity: String!

  """A unique identifier for the folder"""
  id: ID!

  """Name"""
  name: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""New user data"""
type UserWithToken {
  """Token"""
  accessToken: String!

  """User's email"""
  email: String

  """Refresh Token"""
  refreshToken: String
}